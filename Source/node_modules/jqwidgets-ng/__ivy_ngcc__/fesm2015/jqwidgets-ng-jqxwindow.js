import '../jqwidgets/jqxcore';
import '../jqwidgets/jqxbuttons';
import '../jqwidgets/jqxwindow';
import { __decorate, __metadata } from 'tslib';
import { EventEmitter, ElementRef, Input, Output, Component, NgModule } from '@angular/core';

/// <reference path="../../jqwidgets.d.ts" />
import * as Éµngcc0 from '@angular/core';

const _c0 = ["*"];
let jqxWindowComponent = class jqxWindowComponent {
    constructor(containerElement) {
        this.autoCreate = true;
        this.properties = ['autoOpen', 'animationType', 'collapsed', 'collapseAnimationDuration', 'content', 'closeAnimationDuration', 'closeButtonSize', 'closeButtonAction', 'cancelButton', 'dragArea', 'draggable', 'disabled', 'height', 'initContent', 'isModal', 'keyboardCloseKey', 'keyboardNavigation', 'minHeight', 'maxHeight', 'minWidth', 'maxWidth', 'modalOpacity', 'modalZIndex', 'modalBackgroundZIndex', 'okButton', 'position', 'rtl', 'resizable', 'showAnimationDuration', 'showCloseButton', 'showCollapseButton', 'theme', 'title', 'width', 'zIndex'];
        // jqxWindowComponent events
        this.onClose = new EventEmitter();
        this.onCollapse = new EventEmitter();
        this.onExpand = new EventEmitter();
        this.onMoving = new EventEmitter();
        this.onMoved = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.onResizing = new EventEmitter();
        this.onResized = new EventEmitter();
        this.elementRef = containerElement;
    }
    ngOnInit() {
        if (this.autoCreate) {
            this.createComponent();
        }
    }
    ;
    ngOnChanges(changes) {
        if (this.host) {
            for (let i = 0; i < this.properties.length; i++) {
                let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
                let areEqual = false;
                if (this[attrName] !== undefined) {
                    if (typeof this[attrName] === 'object') {
                        if (this[attrName] instanceof Array) {
                            areEqual = this.arraysEqual(this[attrName], this.host.jqxWindow(this.properties[i]));
                        }
                        if (areEqual) {
                            return false;
                        }
                        this.host.jqxWindow(this.properties[i], this[attrName]);
                        continue;
                    }
                    if (this[attrName] !== this.host.jqxWindow(this.properties[i])) {
                        this.host.jqxWindow(this.properties[i], this[attrName]);
                    }
                }
            }
        }
    }
    arraysEqual(attrValue, hostValue) {
        if ((attrValue && !hostValue) || (!attrValue && hostValue)) {
            return false;
        }
        if (attrValue.length != hostValue.length) {
            return false;
        }
        for (let i = 0; i < attrValue.length; i++) {
            if (attrValue[i] !== hostValue[i]) {
                return false;
            }
        }
        return true;
    }
    manageAttributes() {
        let options = {};
        for (let i = 0; i < this.properties.length; i++) {
            let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
            if (this[attrName] !== undefined) {
                options[this.properties[i]] = this[attrName];
            }
        }
        return options;
    }
    moveClasses(parentEl, childEl) {
        let classes = parentEl.classList;
        if (classes.length > 0) {
            childEl.classList.add(...classes);
        }
        parentEl.className = '';
    }
    moveStyles(parentEl, childEl) {
        let style = parentEl.style.cssText;
        childEl.style.cssText = style;
        parentEl.style.cssText = '';
    }
    createComponent(options) {
        if (this.host) {
            return;
        }
        if (options) {
            JQXLite.extend(options, this.manageAttributes());
        }
        else {
            options = this.manageAttributes();
        }
        this.host = JQXLite(this.elementRef.nativeElement.firstChild);
        this.moveClasses(this.elementRef.nativeElement, this.host[0]);
        this.moveStyles(this.elementRef.nativeElement, this.host[0]);
        this.__wireEvents__();
        this.widgetObject = jqwidgets.createInstance(this.host, 'jqxWindow', options);
    }
    createWidget(options) {
        this.createComponent(options);
    }
    __updateRect__() {
        if (this.host)
            this.host.css({ width: this.attrWidth, height: this.attrHeight });
    }
    setOptions(options) {
        this.host.jqxWindow('setOptions', options);
    }
    // jqxWindowComponent properties
    autoOpen(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('autoOpen', arg);
        }
        else {
            return this.host.jqxWindow('autoOpen');
        }
    }
    animationType(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('animationType', arg);
        }
        else {
            return this.host.jqxWindow('animationType');
        }
    }
    collapsed(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('collapsed', arg);
        }
        else {
            return this.host.jqxWindow('collapsed');
        }
    }
    collapseAnimationDuration(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('collapseAnimationDuration', arg);
        }
        else {
            return this.host.jqxWindow('collapseAnimationDuration');
        }
    }
    content(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('content', arg);
        }
        else {
            return this.host.jqxWindow('content');
        }
    }
    closeAnimationDuration(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('closeAnimationDuration', arg);
        }
        else {
            return this.host.jqxWindow('closeAnimationDuration');
        }
    }
    closeButtonSize(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('closeButtonSize', arg);
        }
        else {
            return this.host.jqxWindow('closeButtonSize');
        }
    }
    closeButtonAction(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('closeButtonAction', arg);
        }
        else {
            return this.host.jqxWindow('closeButtonAction');
        }
    }
    cancelButton(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('cancelButton', arg);
        }
        else {
            return this.host.jqxWindow('cancelButton');
        }
    }
    dragArea(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('dragArea', arg);
        }
        else {
            return this.host.jqxWindow('dragArea');
        }
    }
    draggable(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('draggable', arg);
        }
        else {
            return this.host.jqxWindow('draggable');
        }
    }
    disabled(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('disabled', arg);
        }
        else {
            return this.host.jqxWindow('disabled');
        }
    }
    height(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('height', arg);
        }
        else {
            return this.host.jqxWindow('height');
        }
    }
    initContent(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('initContent', arg);
        }
        else {
            return this.host.jqxWindow('initContent');
        }
    }
    isModal(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('isModal', arg);
        }
        else {
            return this.host.jqxWindow('isModal');
        }
    }
    keyboardCloseKey(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('keyboardCloseKey', arg);
        }
        else {
            return this.host.jqxWindow('keyboardCloseKey');
        }
    }
    keyboardNavigation(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('keyboardNavigation', arg);
        }
        else {
            return this.host.jqxWindow('keyboardNavigation');
        }
    }
    minHeight(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('minHeight', arg);
        }
        else {
            return this.host.jqxWindow('minHeight');
        }
    }
    maxHeight(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('maxHeight', arg);
        }
        else {
            return this.host.jqxWindow('maxHeight');
        }
    }
    minWidth(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('minWidth', arg);
        }
        else {
            return this.host.jqxWindow('minWidth');
        }
    }
    maxWidth(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('maxWidth', arg);
        }
        else {
            return this.host.jqxWindow('maxWidth');
        }
    }
    modalOpacity(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('modalOpacity', arg);
        }
        else {
            return this.host.jqxWindow('modalOpacity');
        }
    }
    modalZIndex(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('modalZIndex', arg);
        }
        else {
            return this.host.jqxWindow('modalZIndex');
        }
    }
    modalBackgroundZIndex(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('modalBackgroundZIndex', arg);
        }
        else {
            return this.host.jqxWindow('modalBackgroundZIndex');
        }
    }
    okButton(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('okButton', arg);
        }
        else {
            return this.host.jqxWindow('okButton');
        }
    }
    position(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('position', arg);
        }
        else {
            return this.host.jqxWindow('position');
        }
    }
    rtl(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('rtl', arg);
        }
        else {
            return this.host.jqxWindow('rtl');
        }
    }
    resizable(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('resizable', arg);
        }
        else {
            return this.host.jqxWindow('resizable');
        }
    }
    showAnimationDuration(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('showAnimationDuration', arg);
        }
        else {
            return this.host.jqxWindow('showAnimationDuration');
        }
    }
    showCloseButton(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('showCloseButton', arg);
        }
        else {
            return this.host.jqxWindow('showCloseButton');
        }
    }
    showCollapseButton(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('showCollapseButton', arg);
        }
        else {
            return this.host.jqxWindow('showCollapseButton');
        }
    }
    theme(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('theme', arg);
        }
        else {
            return this.host.jqxWindow('theme');
        }
    }
    title(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('title', arg);
        }
        else {
            return this.host.jqxWindow('title');
        }
    }
    width(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('width', arg);
        }
        else {
            return this.host.jqxWindow('width');
        }
    }
    zIndex(arg) {
        if (arg !== undefined) {
            this.host.jqxWindow('zIndex', arg);
        }
        else {
            return this.host.jqxWindow('zIndex');
        }
    }
    // jqxWindowComponent functions
    bringToFront() {
        this.host.jqxWindow('bringToFront');
    }
    close() {
        this.host.jqxWindow('close');
    }
    collapse() {
        this.host.jqxWindow('collapse');
    }
    closeAll() {
        this.host.jqxWindow('closeAll');
    }
    disable() {
        this.host.jqxWindow('disable');
    }
    destroy() {
        this.host.jqxWindow('destroy');
    }
    enable() {
        this.host.jqxWindow('enable');
    }
    expand() {
        this.host.jqxWindow('expand');
    }
    focus() {
        this.host.jqxWindow('focus');
    }
    isOpen() {
        return this.host.jqxWindow('isOpen');
    }
    move(top, left) {
        this.host.jqxWindow('move', top, left);
    }
    open() {
        this.host.jqxWindow('open');
    }
    hide() {
        this.host.jqxWindow('hide');
    }
    resize(top, left) {
        this.host.jqxWindow('resize', top, left);
    }
    setTitle(title) {
        this.host.jqxWindow('setTitle', title);
    }
    setContent(content) {
        this.host.jqxWindow('setContent', content);
    }
    __wireEvents__() {
        this.host.on('close', (eventData) => { this.onClose.emit(eventData); });
        this.host.on('collapse', (eventData) => { this.onCollapse.emit(eventData); });
        this.host.on('expand', (eventData) => { this.onExpand.emit(eventData); });
        this.host.on('moving', (eventData) => { this.onMoving.emit(eventData); });
        this.host.on('moved', (eventData) => { this.onMoved.emit(eventData); });
        this.host.on('open', (eventData) => { this.onOpen.emit(eventData); });
        this.host.on('resizing', (eventData) => { this.onResizing.emit(eventData); });
        this.host.on('resized', (eventData) => { this.onResized.emit(eventData); });
    }
};
jqxWindowComponent.Éµfac = function jqxWindowComponent_Factory(t) { return new (t || jqxWindowComponent)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef)); };
jqxWindowComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({ type: jqxWindowComponent, selectors: [["jqxWindow"]], inputs: { autoCreate: ["auto-create", "autoCreate"], attrAutoOpen: ["autoOpen", "attrAutoOpen"], attrAnimationType: ["animationType", "attrAnimationType"], attrCollapsed: ["collapsed", "attrCollapsed"], attrCollapseAnimationDuration: ["collapseAnimationDuration", "attrCollapseAnimationDuration"], attrContent: ["content", "attrContent"], attrCloseAnimationDuration: ["closeAnimationDuration", "attrCloseAnimationDuration"], attrCloseButtonSize: ["closeButtonSize", "attrCloseButtonSize"], attrCloseButtonAction: ["closeButtonAction", "attrCloseButtonAction"], attrCancelButton: ["cancelButton", "attrCancelButton"], attrDragArea: ["dragArea", "attrDragArea"], attrDraggable: ["draggable", "attrDraggable"], attrDisabled: ["disabled", "attrDisabled"], attrInitContent: ["initContent", "attrInitContent"], attrIsModal: ["isModal", "attrIsModal"], attrKeyboardCloseKey: ["keyboardCloseKey", "attrKeyboardCloseKey"], attrKeyboardNavigation: ["keyboardNavigation", "attrKeyboardNavigation"], attrMinHeight: ["minHeight", "attrMinHeight"], attrMaxHeight: ["maxHeight", "attrMaxHeight"], attrMinWidth: ["minWidth", "attrMinWidth"], attrMaxWidth: ["maxWidth", "attrMaxWidth"], attrModalOpacity: ["modalOpacity", "attrModalOpacity"], attrModalZIndex: ["modalZIndex", "attrModalZIndex"], attrModalBackgroundZIndex: ["modalBackgroundZIndex", "attrModalBackgroundZIndex"], attrOkButton: ["okButton", "attrOkButton"], attrPosition: ["position", "attrPosition"], attrRtl: ["rtl", "attrRtl"], attrResizable: ["resizable", "attrResizable"], attrShowAnimationDuration: ["showAnimationDuration", "attrShowAnimationDuration"], attrShowCloseButton: ["showCloseButton", "attrShowCloseButton"], attrShowCollapseButton: ["showCollapseButton", "attrShowCollapseButton"], attrTheme: ["theme", "attrTheme"], attrTitle: ["title", "attrTitle"], attrZIndex: ["zIndex", "attrZIndex"], attrWidth: ["width", "attrWidth"], attrHeight: ["height", "attrHeight"] }, outputs: { onClose: "onClose", onCollapse: "onCollapse", onExpand: "onExpand", onMoving: "onMoving", onMoved: "onMoved", onOpen: "onOpen", onResizing: "onResizing", onResized: "onResized" }, features: [Éµngcc0.ÉµÉµNgOnChangesFeature], ngContentSelectors: _c0, decls: 2, vars: 0, template: function jqxWindowComponent_Template(rf, ctx) { if (rf & 1) {
        Éµngcc0.ÉµÉµprojectionDef();
        Éµngcc0.ÉµÉµelementStart(0, "div");
        Éµngcc0.ÉµÉµprojection(1);
        Éµngcc0.ÉµÉµelementEnd();
    } }, encapsulation: 2 }); //jqxWindowComponent
jqxWindowComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input('autoOpen'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrAutoOpen", void 0);
__decorate([
    Input('animationType'),
    __metadata("design:type", String)
], jqxWindowComponent.prototype, "attrAnimationType", void 0);
__decorate([
    Input('collapsed'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrCollapsed", void 0);
__decorate([
    Input('collapseAnimationDuration'),
    __metadata("design:type", Number)
], jqxWindowComponent.prototype, "attrCollapseAnimationDuration", void 0);
__decorate([
    Input('content'),
    __metadata("design:type", String)
], jqxWindowComponent.prototype, "attrContent", void 0);
__decorate([
    Input('closeAnimationDuration'),
    __metadata("design:type", Number)
], jqxWindowComponent.prototype, "attrCloseAnimationDuration", void 0);
__decorate([
    Input('closeButtonSize'),
    __metadata("design:type", Number)
], jqxWindowComponent.prototype, "attrCloseButtonSize", void 0);
__decorate([
    Input('closeButtonAction'),
    __metadata("design:type", String)
], jqxWindowComponent.prototype, "attrCloseButtonAction", void 0);
__decorate([
    Input('cancelButton'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrCancelButton", void 0);
__decorate([
    Input('dragArea'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrDragArea", void 0);
__decorate([
    Input('draggable'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrDraggable", void 0);
__decorate([
    Input('disabled'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrDisabled", void 0);
__decorate([
    Input('initContent'),
    __metadata("design:type", Function)
], jqxWindowComponent.prototype, "attrInitContent", void 0);
__decorate([
    Input('isModal'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrIsModal", void 0);
__decorate([
    Input('keyboardCloseKey'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrKeyboardCloseKey", void 0);
__decorate([
    Input('keyboardNavigation'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrKeyboardNavigation", void 0);
__decorate([
    Input('minHeight'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrMinHeight", void 0);
__decorate([
    Input('maxHeight'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrMaxHeight", void 0);
__decorate([
    Input('minWidth'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrMinWidth", void 0);
__decorate([
    Input('maxWidth'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrMaxWidth", void 0);
__decorate([
    Input('modalOpacity'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrModalOpacity", void 0);
__decorate([
    Input('modalZIndex'),
    __metadata("design:type", Number)
], jqxWindowComponent.prototype, "attrModalZIndex", void 0);
__decorate([
    Input('modalBackgroundZIndex'),
    __metadata("design:type", Number)
], jqxWindowComponent.prototype, "attrModalBackgroundZIndex", void 0);
__decorate([
    Input('okButton'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrOkButton", void 0);
__decorate([
    Input('position'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrPosition", void 0);
__decorate([
    Input('rtl'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrRtl", void 0);
__decorate([
    Input('resizable'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrResizable", void 0);
__decorate([
    Input('showAnimationDuration'),
    __metadata("design:type", Number)
], jqxWindowComponent.prototype, "attrShowAnimationDuration", void 0);
__decorate([
    Input('showCloseButton'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrShowCloseButton", void 0);
__decorate([
    Input('showCollapseButton'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "attrShowCollapseButton", void 0);
__decorate([
    Input('theme'),
    __metadata("design:type", String)
], jqxWindowComponent.prototype, "attrTheme", void 0);
__decorate([
    Input('title'),
    __metadata("design:type", String)
], jqxWindowComponent.prototype, "attrTitle", void 0);
__decorate([
    Input('zIndex'),
    __metadata("design:type", Number)
], jqxWindowComponent.prototype, "attrZIndex", void 0);
__decorate([
    Input('width'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrWidth", void 0);
__decorate([
    Input('height'),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "attrHeight", void 0);
__decorate([
    Input('auto-create'),
    __metadata("design:type", Boolean)
], jqxWindowComponent.prototype, "autoCreate", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "onClose", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "onCollapse", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "onExpand", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "onMoving", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "onMoved", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "onOpen", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "onResizing", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], jqxWindowComponent.prototype, "onResized", void 0);
jqxWindowComponent = __decorate([ __metadata("design:paramtypes", [ElementRef])
], jqxWindowComponent);

let jqxWindowModule = class jqxWindowModule {
};
jqxWindowModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: jqxWindowModule });
jqxWindowModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function jqxWindowModule_Factory(t) { return new (t || jqxWindowModule)(); }, imports: [[]] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(jqxWindowComponent, [{
        type: Component,
        args: [{
                selector: 'jqxWindow',
                template: '<div><ng-content></ng-content></div>'
            }]
    }], function () { return [{ type: Éµngcc0.ElementRef }]; }, { autoCreate: [{
            type: Input,
            args: ['auto-create']
        }], onClose: [{
            type: Output
        }], onCollapse: [{
            type: Output
        }], onExpand: [{
            type: Output
        }], onMoving: [{
            type: Output
        }], onMoved: [{
            type: Output
        }], onOpen: [{
            type: Output
        }], onResizing: [{
            type: Output
        }], onResized: [{
            type: Output
        }], attrAutoOpen: [{
            type: Input,
            args: ['autoOpen']
        }], attrAnimationType: [{
            type: Input,
            args: ['animationType']
        }], attrCollapsed: [{
            type: Input,
            args: ['collapsed']
        }], attrCollapseAnimationDuration: [{
            type: Input,
            args: ['collapseAnimationDuration']
        }], attrContent: [{
            type: Input,
            args: ['content']
        }], attrCloseAnimationDuration: [{
            type: Input,
            args: ['closeAnimationDuration']
        }], attrCloseButtonSize: [{
            type: Input,
            args: ['closeButtonSize']
        }], attrCloseButtonAction: [{
            type: Input,
            args: ['closeButtonAction']
        }], attrCancelButton: [{
            type: Input,
            args: ['cancelButton']
        }], attrDragArea: [{
            type: Input,
            args: ['dragArea']
        }], attrDraggable: [{
            type: Input,
            args: ['draggable']
        }], attrDisabled: [{
            type: Input,
            args: ['disabled']
        }], attrInitContent: [{
            type: Input,
            args: ['initContent']
        }], attrIsModal: [{
            type: Input,
            args: ['isModal']
        }], attrKeyboardCloseKey: [{
            type: Input,
            args: ['keyboardCloseKey']
        }], attrKeyboardNavigation: [{
            type: Input,
            args: ['keyboardNavigation']
        }], attrMinHeight: [{
            type: Input,
            args: ['minHeight']
        }], attrMaxHeight: [{
            type: Input,
            args: ['maxHeight']
        }], attrMinWidth: [{
            type: Input,
            args: ['minWidth']
        }], attrMaxWidth: [{
            type: Input,
            args: ['maxWidth']
        }], attrModalOpacity: [{
            type: Input,
            args: ['modalOpacity']
        }], attrModalZIndex: [{
            type: Input,
            args: ['modalZIndex']
        }], attrModalBackgroundZIndex: [{
            type: Input,
            args: ['modalBackgroundZIndex']
        }], attrOkButton: [{
            type: Input,
            args: ['okButton']
        }], attrPosition: [{
            type: Input,
            args: ['position']
        }], attrRtl: [{
            type: Input,
            args: ['rtl']
        }], attrResizable: [{
            type: Input,
            args: ['resizable']
        }], attrShowAnimationDuration: [{
            type: Input,
            args: ['showAnimationDuration']
        }], attrShowCloseButton: [{
            type: Input,
            args: ['showCloseButton']
        }], attrShowCollapseButton: [{
            type: Input,
            args: ['showCollapseButton']
        }], attrTheme: [{
            type: Input,
            args: ['theme']
        }], attrTitle: [{
            type: Input,
            args: ['title']
        }], attrZIndex: [{
            type: Input,
            args: ['zIndex']
        }], attrWidth: [{
            type: Input,
            args: ['width']
        }], attrHeight: [{
            type: Input,
            args: ['height']
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(jqxWindowModule, { declarations: [jqxWindowComponent], exports: [jqxWindowComponent] }); })();
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(jqxWindowModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [jqxWindowComponent],
                exports: [jqxWindowComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { jqxWindowComponent, jqxWindowModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianF3aWRnZXRzLW5nLWpxeHdpbmRvdy5qcyIsInNvdXJjZXMiOlsianF3aWRnZXRzLW5nLWpxeHdpbmRvdy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs2QkFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FLRztBQUNIO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQU9vQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhjb3JlJztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGJ1dHRvbnMnO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4d2luZG93JztcbmltcG9ydCB7IF9fZGVjb3JhdGUsIF9fbWV0YWRhdGEgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIElucHV0LCBPdXRwdXQsIENvbXBvbmVudCwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2pxd2lkZ2V0cy5kLnRzXCIgLz5cclxubGV0IGpxeFdpbmRvd0NvbXBvbmVudCA9IGNsYXNzIGpxeFdpbmRvd0NvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXJFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5hdXRvQ3JlYXRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBbJ2F1dG9PcGVuJywgJ2FuaW1hdGlvblR5cGUnLCAnY29sbGFwc2VkJywgJ2NvbGxhcHNlQW5pbWF0aW9uRHVyYXRpb24nLCAnY29udGVudCcsICdjbG9zZUFuaW1hdGlvbkR1cmF0aW9uJywgJ2Nsb3NlQnV0dG9uU2l6ZScsICdjbG9zZUJ1dHRvbkFjdGlvbicsICdjYW5jZWxCdXR0b24nLCAnZHJhZ0FyZWEnLCAnZHJhZ2dhYmxlJywgJ2Rpc2FibGVkJywgJ2hlaWdodCcsICdpbml0Q29udGVudCcsICdpc01vZGFsJywgJ2tleWJvYXJkQ2xvc2VLZXknLCAna2V5Ym9hcmROYXZpZ2F0aW9uJywgJ21pbkhlaWdodCcsICdtYXhIZWlnaHQnLCAnbWluV2lkdGgnLCAnbWF4V2lkdGgnLCAnbW9kYWxPcGFjaXR5JywgJ21vZGFsWkluZGV4JywgJ21vZGFsQmFja2dyb3VuZFpJbmRleCcsICdva0J1dHRvbicsICdwb3NpdGlvbicsICdydGwnLCAncmVzaXphYmxlJywgJ3Nob3dBbmltYXRpb25EdXJhdGlvbicsICdzaG93Q2xvc2VCdXR0b24nLCAnc2hvd0NvbGxhcHNlQnV0dG9uJywgJ3RoZW1lJywgJ3RpdGxlJywgJ3dpZHRoJywgJ3pJbmRleCddO1xyXG4gICAgICAgIC8vIGpxeFdpbmRvd0NvbXBvbmVudCBldmVudHNcclxuICAgICAgICB0aGlzLm9uQ2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkNvbGxhcHNlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25FeHBhbmQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbk1vdmluZyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uTW92ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbk9wZW4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vblJlc2l6aW5nID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25SZXNpemVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudFJlZiA9IGNvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xyXG4gICAgICAgIGlmICh0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyTmFtZSA9ICdhdHRyJyArIHRoaXMucHJvcGVydGllc1tpXS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIHRoaXMucHJvcGVydGllc1tpXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXJlRXF1YWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzW2F0dHJOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2F0dHJOYW1lXSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbYXR0ck5hbWVdIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZUVxdWFsID0gdGhpcy5hcnJheXNFcXVhbCh0aGlzW2F0dHJOYW1lXSwgdGhpcy5ob3N0LmpxeFdpbmRvdyh0aGlzLnByb3BlcnRpZXNbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJlRXF1YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KHRoaXMucHJvcGVydGllc1tpXSwgdGhpc1thdHRyTmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbYXR0ck5hbWVdICE9PSB0aGlzLmhvc3QuanF4V2luZG93KHRoaXMucHJvcGVydGllc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdyh0aGlzLnByb3BlcnRpZXNbaV0sIHRoaXNbYXR0ck5hbWVdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhcnJheXNFcXVhbChhdHRyVmFsdWUsIGhvc3RWYWx1ZSkge1xyXG4gICAgICAgIGlmICgoYXR0clZhbHVlICYmICFob3N0VmFsdWUpIHx8ICghYXR0clZhbHVlICYmIGhvc3RWYWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXR0clZhbHVlLmxlbmd0aCAhPSBob3N0VmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyVmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGF0dHJWYWx1ZVtpXSAhPT0gaG9zdFZhbHVlW2ldKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBtYW5hZ2VBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIGxldCBvcHRpb25zID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGF0dHJOYW1lID0gJ2F0dHInICsgdGhpcy5wcm9wZXJ0aWVzW2ldLnN1YnN0cmluZygwLCAxKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5wcm9wZXJ0aWVzW2ldLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgaWYgKHRoaXNbYXR0ck5hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnNbdGhpcy5wcm9wZXJ0aWVzW2ldXSA9IHRoaXNbYXR0ck5hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xyXG4gICAgfVxyXG4gICAgbW92ZUNsYXNzZXMocGFyZW50RWwsIGNoaWxkRWwpIHtcclxuICAgICAgICBsZXQgY2xhc3NlcyA9IHBhcmVudEVsLmNsYXNzTGlzdDtcclxuICAgICAgICBpZiAoY2xhc3Nlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNoaWxkRWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFyZW50RWwuY2xhc3NOYW1lID0gJyc7XHJcbiAgICB9XHJcbiAgICBtb3ZlU3R5bGVzKHBhcmVudEVsLCBjaGlsZEVsKSB7XHJcbiAgICAgICAgbGV0IHN0eWxlID0gcGFyZW50RWwuc3R5bGUuY3NzVGV4dDtcclxuICAgICAgICBjaGlsZEVsLnN0eWxlLmNzc1RleHQgPSBzdHlsZTtcclxuICAgICAgICBwYXJlbnRFbC5zdHlsZS5jc3NUZXh0ID0gJyc7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVDb21wb25lbnQob3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBKUVhMaXRlLmV4dGVuZChvcHRpb25zLCB0aGlzLm1hbmFnZUF0dHJpYnV0ZXMoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvcHRpb25zID0gdGhpcy5tYW5hZ2VBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaG9zdCA9IEpRWExpdGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgdGhpcy5tb3ZlQ2xhc3Nlcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5ob3N0WzBdKTtcclxuICAgICAgICB0aGlzLm1vdmVTdHlsZXModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMuaG9zdFswXSk7XHJcbiAgICAgICAgdGhpcy5fX3dpcmVFdmVudHNfXygpO1xyXG4gICAgICAgIHRoaXMud2lkZ2V0T2JqZWN0ID0ganF3aWRnZXRzLmNyZWF0ZUluc3RhbmNlKHRoaXMuaG9zdCwgJ2pxeFdpbmRvdycsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlV2lkZ2V0KG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChvcHRpb25zKTtcclxuICAgIH1cclxuICAgIF9fdXBkYXRlUmVjdF9fKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhvc3QpXHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5jc3MoeyB3aWR0aDogdGhpcy5hdHRyV2lkdGgsIGhlaWdodDogdGhpcy5hdHRySGVpZ2h0IH0pO1xyXG4gICAgfVxyXG4gICAgc2V0T3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnc2V0T3B0aW9ucycsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLy8ganF4V2luZG93Q29tcG9uZW50IHByb3BlcnRpZXNcclxuICAgIGF1dG9PcGVuKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdhdXRvT3BlbicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygnYXV0b09wZW4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhbmltYXRpb25UeXBlKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdhbmltYXRpb25UeXBlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdhbmltYXRpb25UeXBlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29sbGFwc2VkKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdjb2xsYXBzZWQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2NvbGxhcHNlZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbGxhcHNlQW5pbWF0aW9uRHVyYXRpb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2NvbGxhcHNlQW5pbWF0aW9uRHVyYXRpb24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2NvbGxhcHNlQW5pbWF0aW9uRHVyYXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb250ZW50KGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdjb250ZW50JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdjb250ZW50Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2xvc2VBbmltYXRpb25EdXJhdGlvbihhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnY2xvc2VBbmltYXRpb25EdXJhdGlvbicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygnY2xvc2VBbmltYXRpb25EdXJhdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNsb3NlQnV0dG9uU2l6ZShhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnY2xvc2VCdXR0b25TaXplJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdjbG9zZUJ1dHRvblNpemUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjbG9zZUJ1dHRvbkFjdGlvbihhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnY2xvc2VCdXR0b25BY3Rpb24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2Nsb3NlQnV0dG9uQWN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2FuY2VsQnV0dG9uKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdjYW5jZWxCdXR0b24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2NhbmNlbEJ1dHRvbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYWdBcmVhKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdkcmFnQXJlYScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygnZHJhZ0FyZWEnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmFnZ2FibGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2RyYWdnYWJsZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygnZHJhZ2dhYmxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGlzYWJsZWQoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2Rpc2FibGVkJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhlaWdodChhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnaGVpZ2h0JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdoZWlnaHQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbml0Q29udGVudChhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnaW5pdENvbnRlbnQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2luaXRDb250ZW50Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaXNNb2RhbChhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnaXNNb2RhbCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygnaXNNb2RhbCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGtleWJvYXJkQ2xvc2VLZXkoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2tleWJvYXJkQ2xvc2VLZXknLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2tleWJvYXJkQ2xvc2VLZXknKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBrZXlib2FyZE5hdmlnYXRpb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2tleWJvYXJkTmF2aWdhdGlvbicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygna2V5Ym9hcmROYXZpZ2F0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbWluSGVpZ2h0KGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdtaW5IZWlnaHQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ21pbkhlaWdodCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG1heEhlaWdodChhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnbWF4SGVpZ2h0JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdtYXhIZWlnaHQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBtaW5XaWR0aChhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnbWluV2lkdGgnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ21pbldpZHRoJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbWF4V2lkdGgoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ21heFdpZHRoJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdtYXhXaWR0aCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG1vZGFsT3BhY2l0eShhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnbW9kYWxPcGFjaXR5JywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdtb2RhbE9wYWNpdHknKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBtb2RhbFpJbmRleChhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnbW9kYWxaSW5kZXgnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ21vZGFsWkluZGV4Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbW9kYWxCYWNrZ3JvdW5kWkluZGV4KGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdtb2RhbEJhY2tncm91bmRaSW5kZXgnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ21vZGFsQmFja2dyb3VuZFpJbmRleCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9rQnV0dG9uKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdva0J1dHRvbicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygnb2tCdXR0b24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwb3NpdGlvbihhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygncG9zaXRpb24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ3Bvc2l0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcnRsKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdydGwnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ3J0bCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlc2l6YWJsZShhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygncmVzaXphYmxlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdyZXNpemFibGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG93QW5pbWF0aW9uRHVyYXRpb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ3Nob3dBbmltYXRpb25EdXJhdGlvbicsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygnc2hvd0FuaW1hdGlvbkR1cmF0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvd0Nsb3NlQnV0dG9uKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdzaG93Q2xvc2VCdXR0b24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ3Nob3dDbG9zZUJ1dHRvbicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3dDb2xsYXBzZUJ1dHRvbihhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnc2hvd0NvbGxhcHNlQnV0dG9uJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCdzaG93Q29sbGFwc2VCdXR0b24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGVtZShhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygndGhlbWUnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ3RoZW1lJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGl0bGUoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ3RpdGxlJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4V2luZG93KCd0aXRsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHdpZHRoKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCd3aWR0aCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygnd2lkdGgnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB6SW5kZXgoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ3pJbmRleCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFdpbmRvdygnekluZGV4Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8ganF4V2luZG93Q29tcG9uZW50IGZ1bmN0aW9uc1xyXG4gICAgYnJpbmdUb0Zyb250KCkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2JyaW5nVG9Gcm9udCcpO1xyXG4gICAgfVxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnY2xvc2UnKTtcclxuICAgIH1cclxuICAgIGNvbGxhcHNlKCkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2NvbGxhcHNlJyk7XHJcbiAgICB9XHJcbiAgICBjbG9zZUFsbCgpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdjbG9zZUFsbCcpO1xyXG4gICAgfVxyXG4gICAgZGlzYWJsZSgpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdkaXNhYmxlJyk7XHJcbiAgICB9XHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2Rlc3Ryb3knKTtcclxuICAgIH1cclxuICAgIGVuYWJsZSgpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdlbmFibGUnKTtcclxuICAgIH1cclxuICAgIGV4cGFuZCgpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdleHBhbmQnKTtcclxuICAgIH1cclxuICAgIGZvY3VzKCkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2ZvY3VzJyk7XHJcbiAgICB9XHJcbiAgICBpc09wZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhXaW5kb3coJ2lzT3BlbicpO1xyXG4gICAgfVxyXG4gICAgbW92ZSh0b3AsIGxlZnQpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdtb3ZlJywgdG9wLCBsZWZ0KTtcclxuICAgIH1cclxuICAgIG9wZW4oKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnb3BlbicpO1xyXG4gICAgfVxyXG4gICAgaGlkZSgpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdoaWRlJyk7XHJcbiAgICB9XHJcbiAgICByZXNpemUodG9wLCBsZWZ0KSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygncmVzaXplJywgdG9wLCBsZWZ0KTtcclxuICAgIH1cclxuICAgIHNldFRpdGxlKHRpdGxlKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFdpbmRvdygnc2V0VGl0bGUnLCB0aXRsZSk7XHJcbiAgICB9XHJcbiAgICBzZXRDb250ZW50KGNvbnRlbnQpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4V2luZG93KCdzZXRDb250ZW50JywgY29udGVudCk7XHJcbiAgICB9XHJcbiAgICBfX3dpcmVFdmVudHNfXygpIHtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2Nsb3NlJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uQ2xvc2UuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2NvbGxhcHNlJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uQ29sbGFwc2UuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2V4cGFuZCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkV4cGFuZC5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbignbW92aW5nJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uTW92aW5nLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdtb3ZlZCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbk1vdmVkLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdvcGVuJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uT3Blbi5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbigncmVzaXppbmcnLCAoZXZlbnREYXRhKSA9PiB7IHRoaXMub25SZXNpemluZy5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbigncmVzaXplZCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vblJlc2l6ZWQuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgIH1cclxufTsgLy9qcXhXaW5kb3dDb21wb25lbnRcclxuanF4V2luZG93Q29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xyXG4gICAgeyB0eXBlOiBFbGVtZW50UmVmIH1cclxuXTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnYXV0b09wZW4nKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJBdXRvT3BlblwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdhbmltYXRpb25UeXBlJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJBbmltYXRpb25UeXBlXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2NvbGxhcHNlZCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckNvbGxhcHNlZFwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdjb2xsYXBzZUFuaW1hdGlvbkR1cmF0aW9uJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgTnVtYmVyKVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJDb2xsYXBzZUFuaW1hdGlvbkR1cmF0aW9uXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2NvbnRlbnQnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckNvbnRlbnRcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnY2xvc2VBbmltYXRpb25EdXJhdGlvbicpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE51bWJlcilcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyQ2xvc2VBbmltYXRpb25EdXJhdGlvblwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdjbG9zZUJ1dHRvblNpemUnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBOdW1iZXIpXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckNsb3NlQnV0dG9uU2l6ZVwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdjbG9zZUJ1dHRvbkFjdGlvbicpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyQ2xvc2VCdXR0b25BY3Rpb25cIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnY2FuY2VsQnV0dG9uJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJDYW5jZWxCdXR0b25cIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnZHJhZ0FyZWEnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckRyYWdBcmVhXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2RyYWdnYWJsZScpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckRyYWdnYWJsZVwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdkaXNhYmxlZCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckRpc2FibGVkXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2luaXRDb250ZW50JyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRnVuY3Rpb24pXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckluaXRDb250ZW50XCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2lzTW9kYWwnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJJc01vZGFsXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2tleWJvYXJkQ2xvc2VLZXknKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0cktleWJvYXJkQ2xvc2VLZXlcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgna2V5Ym9hcmROYXZpZ2F0aW9uJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyS2V5Ym9hcmROYXZpZ2F0aW9uXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ21pbkhlaWdodCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyTWluSGVpZ2h0XCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ21heEhlaWdodCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyTWF4SGVpZ2h0XCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ21pbldpZHRoJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJNaW5XaWR0aFwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdtYXhXaWR0aCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyTWF4V2lkdGhcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnbW9kYWxPcGFjaXR5JyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJNb2RhbE9wYWNpdHlcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnbW9kYWxaSW5kZXgnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBOdW1iZXIpXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ck1vZGFsWkluZGV4XCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ21vZGFsQmFja2dyb3VuZFpJbmRleCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE51bWJlcilcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyTW9kYWxCYWNrZ3JvdW5kWkluZGV4XCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ29rQnV0dG9uJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJPa0J1dHRvblwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdwb3NpdGlvbicpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyUG9zaXRpb25cIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgncnRsJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyUnRsXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ3Jlc2l6YWJsZScpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0clJlc2l6YWJsZVwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdzaG93QW5pbWF0aW9uRHVyYXRpb24nKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBOdW1iZXIpXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0clNob3dBbmltYXRpb25EdXJhdGlvblwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdzaG93Q2xvc2VCdXR0b24nKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJTaG93Q2xvc2VCdXR0b25cIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnc2hvd0NvbGxhcHNlQnV0dG9uJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyU2hvd0NvbGxhcHNlQnV0dG9uXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ3RoZW1lJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJUaGVtZVwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCd0aXRsZScpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyVGl0bGVcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnekluZGV4JyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgTnVtYmVyKVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJaSW5kZXhcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnd2lkdGgnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0cldpZHRoXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2hlaWdodCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRySGVpZ2h0XCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2F1dG8tY3JlYXRlJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJhdXRvQ3JlYXRlXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgT3V0cHV0KCksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcIm9uQ2xvc2VcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBPdXRwdXQoKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFdpbmRvd0NvbXBvbmVudC5wcm90b3R5cGUsIFwib25Db2xsYXBzZVwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIE91dHB1dCgpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJvbkV4cGFuZFwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIE91dHB1dCgpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJvbk1vdmluZ1wiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIE91dHB1dCgpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJvbk1vdmVkXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgT3V0cHV0KCksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcIm9uT3BlblwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIE91dHB1dCgpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4V2luZG93Q29tcG9uZW50LnByb3RvdHlwZSwgXCJvblJlc2l6aW5nXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgT3V0cHV0KCksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQucHJvdG90eXBlLCBcIm9uUmVzaXplZFwiLCB2b2lkIDApO1xyXG5qcXhXaW5kb3dDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcclxuICAgIENvbXBvbmVudCh7XHJcbiAgICAgICAgc2VsZWN0b3I6ICdqcXhXaW5kb3cnLFxyXG4gICAgICAgIHRlbXBsYXRlOiAnPGRpdj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9kaXY+J1xyXG4gICAgfSksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0VsZW1lbnRSZWZdKVxyXG5dLCBqcXhXaW5kb3dDb21wb25lbnQpO1xuXG5sZXQganF4V2luZG93TW9kdWxlID0gY2xhc3MganF4V2luZG93TW9kdWxlIHtcclxufTtcclxuanF4V2luZG93TW9kdWxlID0gX19kZWNvcmF0ZShbXHJcbiAgICBOZ01vZHVsZSh7XHJcbiAgICAgICAgaW1wb3J0czogW10sXHJcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbanF4V2luZG93Q29tcG9uZW50XSxcclxuICAgICAgICBleHBvcnRzOiBbanF4V2luZG93Q29tcG9uZW50XVxyXG4gICAgfSlcclxuXSwganF4V2luZG93TW9kdWxlKTtcblxuLyoqXHJcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxyXG4gKi9cblxuZXhwb3J0IHsganF4V2luZG93Q29tcG9uZW50LCBqcXhXaW5kb3dNb2R1bGUgfTtcbiJdfQ==